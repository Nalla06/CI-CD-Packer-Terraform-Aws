name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Java App Configuration
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

  # SonarCloud Configuration (Stored in GitHub Secrets)
  SONAR_HOST_URL: "https://sonarcloud.io"

  # Container Configuration
  DOCKER_IMAGE_NAME: petclinic

  # JFrog Configuration (Stored in GitHub Secrets)
  JFROG_URL: "https://trialt1oy3w.jfrog.io/"
  JFROG_REPO: "docker-local"

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ github.sha }}
          restore-keys: |
            maven-

      - name: Build application
        run: |
          echo "Building application with commit SHA: ${{ github.sha }}"
          cd java-springboot-microservices-appl/
          ./mvnw clean dependency:go-offline
          ./mvnw clean package -DskipTests
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

      - name: Archive JAR files
        uses: actions/upload-artifact@v2
        with:
          name: jar-files
          path: |
            java-springboot-microservices-appl/*/target/*.jar
            java-springboot-microservices-appl/target/*.jar

  test-app:
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Restore Maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ github.sha }}
          restore-keys: |
            maven-

      - name: Run tests
        run: |
          echo "Running tests for commit SHA: ${{ github.sha }}"
          cd java-springboot-microservices-appl/
          ./mvnw test
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: java-springboot-microservices-appl/*/target/surefire-reports/

  sonar-scan:
    runs-on: ubuntu-latest
    needs: test-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Restore Maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ github.sha }}
          restore-keys: |
            maven-

      - name: SonarCloud Scan
        run: |
          echo "Running SonarCloud scan for commit SHA: ${{ github.sha }}"
          cd java-springboot-microservices-appl/
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.sources=. \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.java.libraries=.m2/repository/**/*.jar \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}
        continue-on-error: true

  build-docker:
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          echo "Building Docker image for commit SHA: ${{ github.sha }}"
          cd java-springboot-microservices-appl/
          ls -lah */target/
          chmod +x build-dev-docker-images.sh
          ./build-dev-docker-images.sh
          docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:${{ github.sha }}

      - name: Push Docker image to JFrog
        run: |
          echo "Pushing Docker image to JFrog for commit SHA: ${{ github.sha }}"
          docker tag $DOCKER_IMAGE_NAME:${{ github.sha }} ${{ env.JFROG_URL }}/${{ env.JFROG_REPO }}/$DOCKER_IMAGE_NAME:${{ github.sha }}
          docker push ${{ env.JFROG_URL }}/${{ env.JFROG_REPO }}/$DOCKER_IMAGE_NAME:${{ github.sha }}

  snyk-scan:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@v1
        with:
          version: 'latest'

      - name: Snyk scan
        run: |
          echo "Running Snyk scan for commit SHA: ${{ github.sha }}"
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --all-projects
        continue-on-error: true

  push-to-jfrog:
    runs-on: ubuntu-latest
    needs: [build-docker, snyk-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker login
        run: echo ${{ secrets.JFROG_PASSWORD }} | docker login -u ${{ secrets.JFROG_USERNAME }} --password-stdin ${{ env.JFROG_URL }}

      - name: Push Docker image to JFrog
        run: |
          echo "Pushing to JFrog for commit SHA: ${{ github.sha }}"
          docker tag $DOCKER_IMAGE_NAME:${{ github.sha }} ${{ env.JFROG_URL }}/${{ env.JFROG_REPO }}/$DOCKER_IMAGE_NAME:${{ github.sha }}
          docker push ${{ env.JFROG_URL }}/${{ env.JFROG_REPO }}/$DOCKER_IMAGE_NAME:${{ github.sha }}

      - name: Upload artifacts to JFrog
        run: |
          echo "Uploading artifacts to JFrog for commit SHA: ${{ github.sha }}"
          curl -u ${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }} -T "java-springboot-microservices-appl/*/target/*.jar" "$JFROG_URL/$JFROG_REPO/"