stages:
  - build-app
  - test
  - sonar-scan
  - build-docker
  - snyk-scan
  - push-to-jfrog

variables:
  # Java App Configuration
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

  # SonarCloud Configuration (Stored in GitLab Variables)
  SONAR_HOST_URL: "https://sonarcloud.io"

  # Container Configuration
  DOCKER_IMAGE_NAME: petclinic
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA

  # JFrog Configuration (Stored in GitLab Variables)
  JFROG_URL: "https://trialt1oy3w.jfrog.io/"
  JFROG_REPO: "docker-local"

# Cache dependencies between jobs
cache:
  key: maven-cache-${CI_PROJECT_NAME}
  paths:
    - .m2/repository
    - target/
  policy: pull-push

# ======= JAVA APPLICATION BUILD =======
build-app:
  stage: build-app
  image: maven:3.8-openjdk-11
  tags:
    - nalla
  script:
    - cd $CI_PROJECT_DIR/java-springboot-microservices-appl/
    - ./mvnw dependency:go-offline
    - |
      ./mvnw clean package -DskipTests > build.log 2>&1
    - tail -n 100 build.log
  artifacts:
    paths:
      - $CI_PROJECT_DIR/java-springboot-microservices-appl/*/target/*.jar
      - $CI_PROJECT_DIR/java-springboot-microservices-appl/build.log
    expire_in: 1 day
  #rules:
    #- changes:
        #- "java-springboot-microservices-appl/**"
        #- "pom.xml"
# ======= JAVA TESTING =======
test-app:
  stage: test
  image: maven:3.8-openjdk-11
  tags:
    - nalla
  script:
    - cd $CI_PROJECT_DIR/java-springboot-microservices-appl/
    - ./mvnw dependency:go-offline
    - |
      ./mvnw test > test.log 2>&1
    - tail -n 100 test.log
  artifacts:
    reports:
      junit: $CI_PROJECT_DIR/java-springboot-microservices-appl/*/target/surefire-reports/TEST-*.xml
    paths:
      - $CI_PROJECT_DIR/java-springboot-microservices-appl/test.log
    expire_in: 1 day
  dependencies:
    - build-app
  #rules:
   # - changes:
        #- "java-springboot-microservices-appl/**"
        #- "pom.xml"

##### ======= SONAR CLOUD SCAN =======
sonar-scan:
  stage: sonar-scan
  image: maven:3.8-openjdk-17
  tags:
    - nalla
  script:
    - cd $CI_PROJECT_DIR/java-springboot-microservices-appl/
    - |
      ./mvnw sonar:sonar \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.organization=$SONAR_ORGANIZATION \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN
  dependencies:
    - test-app

# ======= DOCKER CONTAINERIZATION =======
build-docker:
  stage: build-docker
  image: docker:latest
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
  script:
    - cd $CI_PROJECT_DIR/java-springboot-microservices-appl/
    - ls -lah */target/
    - chmod +x build-dev-docker-images.sh
    - ./build-dev-docker-images.sh
  dependencies:
    - build-app

# ======= SNYK SECURITY SCAN =======
snyk-scan:
  stage: snyk-scan
  image: snyk/snyk-cli
  script:
    - snyk auth $SNYK_TOKEN
    - snyk test --all-projects
  dependencies:
    - build-docker

# ======= PUSH TO JFROG =======
push-to-jfrog:
  stage: push-to-jfrog
  image: docker:latest
  before_script:
    - echo "$JFROG_PASSWORD" | docker login -u "$JFROG_USERNAME" --password-stdin $JFROG_URL
  script:
    - docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $JFROG_URL/$JFROG_REPO/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $JFROG_URL/$JFROG_REPO/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
  dependencies:
    - snyk-scan
